import sys
import os
from datetime import datetime
from extractors import extract_presentation
from config.settings import settings
from workflows import analyze_with_langgraph

def main():
    print("🚀 AI-Powered PowerPoint Inconsistency Detector")
    print("🤖 Using Google Gemini Flash")
    print("="*60)
    
    try:
        api_key = settings.google_api_key.get_secret_value()
        print(f"🔑 API Key status: {'✅ Set' if api_key and api_key != 'YOUR_API_KEY_HERE' else '❌ Missing'}")
        if api_key:
            print(f"🔑 API Key preview: {api_key[:10]}...{api_key[-4:]}")
    except Exception as e:
        print(f"❌ API Key error: {e}")
        return
    
    if len(sys.argv) > 1:
        filename = sys.argv[1]
    else:
        filename = "test.pptx"
        print(f"💡 No file specified, using default: {filename}")
    
    try:
        print(f"📁 Extracting content from {filename}...")
        slides_content = extract_presentation(filename)
        
        print("\n🤖 Analyzing with Google Gemini...")
        ai_results = analyze_with_langgraph(slides_content)
        
        print(ai_results)
        
        output_file = write_results_to_markdown(filename, ai_results, slides_content)
        print(f"\n💾 Results saved to: {output_file}")
        
    except FileNotFoundError as e:
        print(f"❌ {e}")
    except ValueError as e:
        print(f"❌ Configuration error: {e}")
        print("💡 Set your API key: export GOOGLE_API_KEY='api-key'")
    except Exception as e:
        print(f"❌ Unexpected error: {e}")

def ensure_results_directory() -> str:
    results_dir = "results"
    
    if not os.path.exists(results_dir):
        os.makedirs(results_dir)
        print(f"📁 Created results directory: {results_dir}/")
    
    return results_dir

def write_results_to_markdown(input_filename: str, ai_results: str, slides_content: list) -> str:
    results_dir = ensure_results_directory()
    
    base_name = os.path.splitext(os.path.basename(input_filename))[0]
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    output_filename = os.path.join(results_dir, f"{base_name}_analysis_{timestamp}.md")
    
    content = []
    content.append("# PowerPoint Inconsistency Analysis Report")
    content.append("")
    content.append("## 📋 Analysis Summary")
    content.append("")
    content.append(f"- **File Analyzed:** `{input_filename}`")
    content.append(f"- **Analysis Date:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    content.append(f"- **Total Slides:** {len(slides_content)}")
    content.append("")
    
    content.append("## 📊 Slide Summary")
    content.append("")
    content.append("| Slide | Text Elements |")
    content.append("|-------|---------------|")
    for slide in slides_content:
        slide_num = slide['slide_number']
        elements = slide.get('total_elements', 0)
        content.append(f"| {slide_num} | {elements} |")
    content.append("")
    
    content.append("## 🤖 AI Analysis Results")
    content.append("")
    content.append("```")
    content.append(ai_results)
    content.append("```")
    content.append("")
    
    content.append("---")
    content.append("")
    content.append("*Generated by AI-Powered PowerPoint Inconsistency Detector*")
    content.append("")
    
    try:
        with open(output_filename, 'w', encoding='utf-8') as f:
            f.write('\n'.join(content))
        return output_filename
    except Exception as e:
        print(f"⚠️ Could not write to file: {e}")
        return None

if __name__ == "__main__":
    main()